use regex_syntax::ast::*;

// for now, put the same invalid span everywhere
grammar(span: Span);

pub Regex: Ast = {
    <mut asts: Ast+> => if asts.len() == 1 {
        asts.pop().unwrap()
    } else { Ast::Concat(Concat{
        span: span,
        asts: asts
    })},
    "" => Ast::Empty(span),
};

Ast: Ast = {
    Dot,
    Literal
}


// Can't write the grammar for a full command because we accept multiple separators
// This parser handles a single regex / replacement, and we'll split on separator before we get here
// And also un-escape escaped separators?

Dot: Ast = "." => Ast::Dot(span);

Literal: Ast = {
    <c:r"[^.\\]"> => Ast::Literal(Literal {
        span: span,
        kind: LiteralKind::Verbatim,
        c: c.chars().nth(0).unwrap()
    })
};
